//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: rec.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "rec_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "rec_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include "recognition/rec.h"
#include "recognition/recmus.h"
#include "recognition/recim.h"
#include "recognition/recbookctrl.h"
#include "mus/mustoolpanel.h"

// Implement window functions

wxSizer *WindowFunc4( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );

    RecSplitterWindow *item1 = new RecSplitterWindow( parent, ID4_SPLITTER1, wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxGROW|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *MusOutputFunc4( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 1 );

    MusToolPanel *item1 = new MusToolPanel( parent, ID4_TOOLPANEL, wxDefaultPosition, wxSize(10,10), 0 );
    item0->Add( item1, 0, wxGROW, 0 );

    RecMusController *item2 = new RecMusController( parent, ID4_MUSPANEL, wxDefaultPosition, wxSize(200,160), wxSUNKEN_BORDER );
    item0->Add( item2, 0, wxGROW|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *RecBookFunc4( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );

    RecBookCtrl *item1 = new RecBookCtrl( parent, ID4_TREEBOOK, wxDefaultPosition, wxSize(120,160), wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER );
    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    wxStaticLine *item2 = new wxStaticLine( parent, ID4_LINE2, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBitmap *item3 = new wxStaticBitmap( parent, ID4_PREVIEW, BitmapsFunc4( 14 ), wxDefaultPosition, wxSize(200,200) );
    item0->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item4 = new wxCheckBox( parent, ID4_CB_PREVIEW, _("Preview"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *RecBookDataFunc4( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableCol( 1 );
    item0->AddGrowableRow( 0 );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Book information") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxFlexGridSizer *item3 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item4 = new wxStaticText( parent, ID4_TEXT, _("RISM"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID4_RISM, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID4_TEXT, _("Composer"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item6, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID4_COMPOSER, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID4_TEXT, _("Title"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID4_TITLE, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID4_TEXT, _("Printer"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID4_PRINTER, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item12 = new wxStaticText( parent, ID4_TEXT, _("Year"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item12, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item13 = new wxTextCtrl( parent, ID4_YEAR, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID4_TEXT, _("Library"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item14, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID4_LIBRARY, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxALIGN_CENTER, 5 );

    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    wxStaticBox *item17 = new wxStaticBox( parent, -1, _("File directories") );
    wxStaticBoxSizer *item16 = new wxStaticBoxSizer( item17, wxVERTICAL );

    wxStaticText *item18 = new wxStaticText( parent, ID4_TEXT, _("Images"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item19 = new wxFlexGridSizer( 2, 0, 0 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID4_BOOK_IMAGES, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item22 = new wxButton( parent, ID4_ON_BOOK_IMAGES, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item19->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item16->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item23 = new wxStaticText( parent, ID4_TEXT, _("Aruspix files"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item24 = new wxFlexGridSizer( 2, 0, 0 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item26 = new wxTextCtrl( parent, ID4_BOOK_AXFILES, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item27 = new wxButton( parent, ID4_ON_BOOK_AXFILES, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item24->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item16->Add( item24, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item16, 0, wxGROW|wxALL, 5 );

    wxStaticBox *item29 = new wxStaticBox( parent, -1, _("Binarization") );
    wxStaticBoxSizer *item28 = new wxStaticBoxSizer( item29, wxVERTICAL );

    wxFlexGridSizer *item30 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item31 = new wxStaticText( parent, ID4_TEXT, _("Document condition"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs32[] = 
    {
        _("Brink (2 Classes)"), 
        _("Sauvola"), 
        _("Brink (3 Classes)")
    };
    wxChoice *item32 = new wxChoice( parent, ID4_PAGE_BIN_CHOICE, wxDefaultPosition, wxSize(140,-1), 3, strs32, 0 );
    item30->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    item28->Add( item30, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item33 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item34 = new wxStaticText( parent, ID4_TEXT, _("Region size (uneven lighting)"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item34, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item35 = new wxSpinCtrl( parent, ID4_RGN_SIZE_SPINCTRL, wxT("0"), wxDefaultPosition, wxSize(55,-1), 0, 0, 100, 0 );
    item33->Add( item35, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item28->Add( item33, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item36 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item37 = new wxCheckBox( parent, ID4_BIN_SELECT_CHECKBOX, _("Allow algorithm selection when processing individual images"), wxDefaultPosition, wxDefaultSize, 0 );
    item36->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    item28->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item28, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item38 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item39 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item40 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *MenuBarFunc4()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->AppendSeparator();
    item1->Append( ID4_NEW_BOOK, _("N&ew book"), _("Create a new book") );
    item1->Append( ID4_OPEN_BOOK, _("Open &book"), _("Open a book") );
    item1->Append( ID4_CLOSE_BOOK, _("C&lose book"), _("Close the book") );
    item1->Append( ID4_SAVE_BOOK, _("Sa&ve book"), _("Close the book") );
    item1->Append( ID4_SAVE_AS_BOOK, _("Save boo&k as"), _("Close the book") );
    item1->AppendSeparator();
    item1->Append( ID4_EXPORT_IMAGE, _("Export as &image"), _("Save music part in an image file") );
    item1->Append( ID4_EXPORT_AXTYP, _("Export typographic model"), _("Export Aruspix files to train a new typographic model") );
    item1->Append( ID4_EXPORT_AXMUS, _("Export music model"), _("Export Aruspix files to train a new music model") );
    item0->Append( item1, _("commun1") );
    
    wxMenu* item2 = new wxMenu;
    item2->AppendSeparator();
    item2->Append( ID4_PROCESS, _("&Run"), _("Process current page") );
    item2->Append( ID4_CANCEL_REC, _("Un&do recognition"), _("Undo the recognition step") );
    item0->Append( item2, _("commun2") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( ID4_BOOK_EDIT, _("Edit"), _("Edit the book informations") );
    item3->Append( ID4_BOOK_LOAD, _("Reload files"), _("Reload images and Aruspix files into the book") );
    item3->AppendSeparator();
    item3->Append( ID4_BOOK_PRE, _("Batch preprocessing"), _("Preprocess active pages of the book") );
    item3->Append( ID4_BOOK_REC, _("Batch recognition"), _("Run recognition on remaining pages of the book") );
    item3->Append( ID4_BOOK_ADAPT, _("Optimize"), _("Perform full optimization on recognized pages of the book") );
    item3->AppendSeparator();
    item3->Append( ID4_BOOK_RESET_ADAPT, _("Reset optimization"), _("Reset optimization") );
    item0->Append( item3, _("&Book") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( ID4_ZOOM_OUT, _("Zoom out\t-"), _("Zoom out") );
    item4->Append( ID4_ZOOM_IN, _("Zoom in\t+"), _("Zoom in") );
    item4->Append( ID4_ADJUST, _("Adjust"), _("Adjust to fit the window"), wxITEM_CHECK );
    item4->Append( ID4_ADJUST_V, _("Adjust vertically"), _("Adjust to fit the window vertically"), wxITEM_CHECK );
    item4->Append( ID4_ADJUST_H, _("Adjust horizontally"), _("Adjust to fit the window horizontally"), wxITEM_CHECK );
    item0->Append( item4, _("&Page") );
    
    wxMenu* item5 = new wxMenu;
    item5->Append( ID4_SHOW_STAFF_BMP, _("Staff correspondence"), _("Show staff correspondence on image"), wxITEM_CHECK );
    item5->AppendSeparator();
    item5->Append( ID4_INSERT_MODE, _("&Insertion"), wxT(""), wxITEM_CHECK );
    item5->Append( ID4_NOTES, _("&Notes and rests"), wxT("") );
    item5->Append( ID4_KEYS, _("&Keys"), wxT("") );
    item5->Append( ID4_SIGNS, _("&Propostions"), wxT("") );
    item5->Append( ID4_SYMBOLES, _("&Symboles"), wxT("") );
    item0->Append( item5, _("&Tools") );
    
    return item0;
}

// Implement toolbar functions

void ToolBarFunc4( wxToolBar *parent )
{
    parent->SetMargins( 2, 2 );
    
    parent->AddTool( ID4_ZOOM_OUT, wxT(""), BitmapsFunc4( 7 ), wxNullBitmap, wxITEM_NORMAL, _("Zoom out"), _("Zoom out") );
    parent->AddTool( ID4_ZOOM_IN, wxT(""), BitmapsFunc4( 8 ), wxNullBitmap, wxITEM_NORMAL, _("Zoom in"), _("Zoom in") );
    parent->AddTool( ID4_ADJUST, wxT(""), BitmapsFunc4( 9 ), wxNullBitmap, wxITEM_CHECK, _("Adjust"), _("Adjust to fit the window") );
    parent->AddTool( ID4_ADJUST_V, wxT(""), BitmapsFunc4( 10 ), wxNullBitmap, wxITEM_CHECK, _("Adjust vertically"), _("Adjust to fit the window vertically") );
    parent->AddTool( ID4_ADJUST_H, wxT(""), BitmapsFunc4( 11 ), wxNullBitmap, wxITEM_CHECK, _("Adjust horizontally"), _("Adjust to fit the window horizontally") );
    parent->AddSeparator();
    parent->AddTool( ID4_SHOW_STAFF_BMP, _("Staff correspondence"), BitmapsFunc4( 12 ), wxNullBitmap, wxITEM_CHECK, _("Staff correspondence"), _("Show staff correspondence on image") );
    parent->AddSeparator();
    parent->AddTool( ID4_PROCESS, wxT(""), BitmapsFunc4( 6 ), wxNullBitmap, wxITEM_NORMAL, _("Pre-process"), _("Pre-process current page") );
    parent->AddSeparator();
    parent->AddTool( ID4_BATCH, wxT(""), BitmapsFunc4( 0 ), wxNullBitmap, wxITEM_NORMAL, _("Batch pre-processing"), _("Execute batch pre-processing") );
    
    parent->Realize();
}

// Implement bitmap functions

wxBitmap BitmapsFunc4( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "  c None",
        "a c #808080",
        "c c #800000",
        /* pixels */
        "       cc       ",
        "      cccc      ",
        "      cccc      ",
        "      cccc      ",
        "      cccc      ",
        "      cccc      ",
        "      cccc      ",
        "      acca      ",
        "       cc       ",
        "                ",
        "       cc       ",
        "      cccc      ",
        "      cccc      ",
        "       cc       ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "  c None",
        "a c #808080",
        "c c #0000FF",
        /* pixels */
        "       cc       ",
        "      cccc      ",
        "      cccc      ",
        "      cccc      ",
        "      cccc      ",
        "      cccc      ",
        "      cccc      ",
        "      acca      ",
        "       cc       ",
        "                ",
        "       cc       ",
        "      cccc      ",
        "      cccc      ",
        "       cc       ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 2)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "  c None",
        "a c #FFFF00",
        "b c #CACA00",
        /* pixels */
        "       aa       ",
        "      aaaa      ",
        "      aaaa      ",
        "      aaaa      ",
        "      aaaa      ",
        "      aaaa      ",
        "      aaaa      ",
        "      baab      ",
        "       aa       ",
        "                ",
        "       aa       ",
        "      aaaa      ",
        "      aaaa      ",
        "      baab      ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 3)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "  c None",
        "a c #808080",
        "b c #008000",
        /* pixels */
        "       bb       ",
        "      bbbb      ",
        "      bbbb      ",
        "      bbbb      ",
        "      bbbb      ",
        "      bbbb      ",
        "      bbbb      ",
        "      abba      ",
        "       bb       ",
        "                ",
        "       bb       ",
        "      bbbb      ",
        "      bbbb      ",
        "       bb       ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 4)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 7 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #808080",
        "d c #FFFF00",
        "f c #C0C0C0",
        "g c #808000",
        /* pixels */
        "                ",
        "  cccccccccca   ",
        "  cbbabbbbbfa   ",
        "  cbfaffffffa   ",
        "  cbbabbbabfa   ",
        " acbfaffafafa   ",
        "adcbaaabbabfa   ",
        "afcbfaffffffa   ",
        "adcbbbbbaaaaaaaa",
        "afcbaaaaggggggga",
        "adcaggggggggggga",
        "afcagggggggggga ",
        "adagggggggggga  ",
        "aagggggggggga   ",
        "aaaaaaaaaaaa    "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 5)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "  c None",
        "a c Black",
        /* pixels */
        "                ",
        "                ",
        "            a   ",
        "            aa  ",
        "     a      aaa ",
        "     a      a a ",
        "     a      a   ",
        "     a      a   ",
        "     a   aaaa   ",
        "     a  aaaaa   ",
        "  aaaa   aaa    ",
        " aa aa          ",
        "  aaa           ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 6)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 10 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #808080",
        "d c #FFFF00",
        "e c #CC3232",
        "g c #800000",
        "h c #C0C0C0",
        "i c #808000",
        "j c #A52A2A",
        /* pixels */
        "    aaaaaaaa    ",
        "  aaichhdbdba   ",
        " aiihhiaaabdba  ",
        " aaaaaadbdaaaa  ",
        "  abdbaaabdbda  ",
        "  adcccccabddaj ",
        " agadbdbdabdiag ",
        " aggadcccadiiag ",
        "  aceadbbaidag  ",
        "   agcaaaaaaa   ",
        "    aegcgggg    ",
        "     aceggg     ",
        "      acgg      ",
        "       eg       ",
        "       ag       "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 7)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 6 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #000080",
        "e c #0000FF",
        "f c #C0C0C0",
        /* pixels */
        "    aaaa        ",
        "  aaffbfaa      ",
        " affbbfbbfa     ",
        " abffffbffa     ",
        "abffbfffffba    ",
        "affaaaaaafba    ",
        "abfaaaaaaffa    ",
        "afbbffffbbba    ",
        " abfbfbbfba     ",
        " afbbfbfbfa     ",
        "  aaffffaace    ",
        "    aaaa  ecee  ",
        "           ecce ",
        "            ecce",
        "             ece"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 8)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 6 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #000080",
        "d c #0000FF",
        "e c #C0C0C0",
        /* pixels */
        "    aaaa        ",
        "  aaeebeaa      ",
        " aeebbebbea     ",
        " abeeaabeea     ",
        "abeebaaeeeba    ",
        "aeeaaaaaaeba    ",
        "abeaaaaaaeea    ",
        "aebbeaaebbba    ",
        " abebaabeba     ",
        " aebbebebea     ",
        "  aaeeeeaacd    ",
        "    aaaa  dcdd  ",
        "           dccd ",
        "            dccd",
        "             dcd"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 9)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "15 15 3 1",
        "  c None",
        "a c Black",
        "b c #404040",
        /* pixels */
        "bbbbbbbbbbbbbbb",
        "b      a      b",
        "b     aaa     b",
        "b    aa aa    b",
        "b     a a     b",
        "b  a  a a  a  b",
        "b aaaaaaaaaaa b",
        "baa   a a   aab",
        "b aaaaaaaaaaa b",
        "b  a  a a  a  b",
        "b     a a     b",
        "b    aa aa    b",
        "b     aaa     b",
        "b      a      b",
        "bbbbbbbbbbbbbbb"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 10)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "15 15 3 1",
        "  c None",
        "a c Black",
        "b c #404040",
        /* pixels */
        "bbbbbbbbbbbbbbb",
        "b      a      b",
        "b     aaa     b",
        "b    aa aa    b",
        "b     a a     b",
        "b     a a     b",
        "b     a a     b",
        "b     a a     b",
        "b     a a     b",
        "b     a a     b",
        "b     a a     b",
        "b    aa aa    b",
        "b     aaa     b",
        "b      a      b",
        "bbbbbbbbbbbbbbb"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 11)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "15 15 3 1",
        "  c None",
        "a c Black",
        "c c #404040",
        /* pixels */
        "ccccccccccccccc",
        "c             c",
        "c             c",
        "c             c",
        "c             c",
        "c  a       a  c",
        "c aaaaaaaaaaa c",
        "caa         aac",
        "c aaaaaaaaaaa c",
        "c  a       a  c",
        "c             c",
        "c             c",
        "c             c",
        "c             c",
        "ccccccccccccccc"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 12)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "  c None",
        "a c #00FFFF",
        "c c #FF0000",
        /* pixels */
        "       a        ",
        "       a        ",
        "  a    a        ",
        "a a    a     c  ",
        "a a    a     c  ",
        "a a    a     c  ",
        "a a   aaa    c  ",
        "aaa  aaaaa   c  ",
        "a     aaa    c  ",
        "aaa    a    ccc ",
        "a a        c   c",
        "a a         ccc ",
        "a a          c  ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 13)
    {
        static const unsigned char data[] = 
        {
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,246,218,213,246,218,205,246,218,205,238,226,222,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,246,222,213,246,222,189,246,226,189,246,226,189,246,218,205,246,222,222,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,246,218,213,
            246,218,189,246,234,115,255,242,131,255,242,131,246,230,172,246,218,197,238,230,238,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,246,218,205,246,218,
            180,246,234,115,246,238,148,246,234,148,246,234,164,246,222,189,246,230,230,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,238,218,213,230,202,180,131,
            125,8,255,242,115,255,246,115,65,48,0,230,202,180,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,238,222,222,230,202,189,172,157,106,
            82,72,0,255,242,172,49,28,0,32,12,0,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,213,194,189,197,170,
            164,156,137,123,213,198,197,123,121,115,0,0,0,222,218,222,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,230,218,222,213,198,197,189,
            174,172,0,0,0,205,206,205,0,0,0,0,0,0,222,218,222,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,230,226,230,
            180,182,180,148,141,148,205,206,205,123,121,123,0,0,0,222,218,222,238,234,238,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,213,206,
            213,180,182,180,0,0,0,205,206,205,123,121,123,0,0,0,222,218,222,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,230,
            226,230,180,182,180,148,141,148,0,0,0,123,121,123,0,0,0,0,0,0,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            213,206,213,180,182,180,148,141,148,205,206,205,123,121,123,0,0,0,222,218,222,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,230,226,230,213,206,213,148,141,148,0,0,0,98,97,98,0,0,0,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,238,
            234,238,230,226,230,180,182,180,148,145,148,0,0,0,180,174,180,221,221,221
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 221, 221, 221);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 14)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 1 1",
        "  c None",
        /* pixels */
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}

wxBitmap BitmapsFuncClassification( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 2 1",
        "  c None",
        "a c Black",
        /* pixels */
        "                ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 2 1",
        "  c None",
        "a c #FFFF00",
        /* pixels */
        "                ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 2)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 2 1",
        "  c None",
        "b c #FF8000",
        /* pixels */
        "                ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 3)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 2 1",
        "  c None",
        "b c #007F00",
        /* pixels */
        "                ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 4)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 2 1",
        "  c None",
        "b c #00FF00",
        /* pixels */
        "                ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        " bbbbbbbbbbbbbb ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 5)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 2 1",
        "  c None",
        "a c #E4E4E4",
        /* pixels */
        "                ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        " aaaaaaaaaaaaaa ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
