//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: axapp.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "axapp_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "axapp_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *ProgressDlgFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 1, 0, 0 );

    wxTextCtrl *item2 = new wxTextCtrl( parent, ID_TC_LOG_PROGRESS, wxT(""), wxDefaultPosition, wxSize(500,300), wxTE_MULTILINE );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 0 );

    wxFlexGridSizer *item3 = new wxFlexGridSizer( 1, 0, 0 );
    item3->AddGrowableCol( 0 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Elapsed time : "), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TX_REST_PROGRESS, _("..."), wxDefaultPosition, wxSize(200,-1), 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item3->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxGauge *item7 = new wxGauge( parent, ID_GAUGE1_PROGRESS, 100, wxDefaultPosition, wxSize(300,10), 0 );
    item3->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TX_MSG2_PROGRESS, _("Loading ..."), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxGauge *item9 = new wxGauge( parent, ID_GAUGE2_PROGRESS, 100, wxDefaultPosition, wxSize(300,10), 0 );
    item3->Add( item9, 0, wxGROW|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID_TX_MSG3_PROGRESS, _("Loading ..."), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxGauge *item11 = new wxGauge( parent, ID_GAUGE3_PROGRESS, 100, wxDefaultPosition, wxSize(300,10), 0 );
    item3->Add( item11, 0, wxGROW|wxALL, 5 );

    item3->Add( 20, 10, 0, wxALIGN_CENTER, 5 );

    wxCheckBox *item12 = new wxCheckBox( parent, ID_CB_CLOSE_AT_END, _("Close this dialog if process completes successfully"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item14 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->SetDefault();
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *GotoDlgFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 1, 0, 0 );

    wxRadioButton *item2 = new wxRadioButton( parent, ID_RB_FIRST_GOTO, _("First page"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item3 = new wxRadioButton( parent, ID_RB_LAST_GOTO, _("Last page"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item5 = new wxRadioButton( parent, ID_RB_NO_GOTO, _("Page n°"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item6 = new wxSpinCtrl( parent, ID_SC_NO_GOTO, wxT("1"), wxDefaultPosition, wxSize(60,-1), 0, 1, 1000, 1 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item8 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->SetDefault();
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item7, 0, wxALIGN_CENTER|wxTOP, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *MainMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( ID_NEW, _("&New"), _("Create a new file") );
    item1->Append( ID_OPEN, _("&Open\tCtrl-O"), _("Open a file") );
    item1->Append( ID_SAVE, _("&Save\tCtrl-S"), _("Save the file") );
    item1->Append( ID_SAVE_AS, _("Save &as\tShift-Ctrl-S"), _("Save the file") );
    item1->AppendSeparator();
    item1->Append( ID_CLOSE, _("&Close\tCtrl-W"), _("Close open file") );
    item1->AppendSeparator();
    
    wxMenu* item2 = new wxMenu;
    item1->Append( ID_MENU_ENV, _("&Workspaces"), item2 );

    item1->AppendSeparator();
    item1->Append( wxID_EXIT, _("&Quit"), _("Quit Aruspix") );
    item0->Append( item1, _("&File") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( ID_UNDO, _("Undo\tCtrl-Z"), _("Redo last operation") );
    item3->Append( ID_REDO, _("Redo\tShift-Ctrl-Z"), _("Redo last operation") );
    item3->AppendSeparator();
    item3->Append( ID_CUT, _("Cu&t\tCtrl-X"), _("Cut the image and place it in the clipboard") );
    item3->Append( ID_COPY, _("&Copy\tCtrl-C"), _("Copy the image in the clipboard") );
    item3->Append( ID_PASTE, _("&Paste\tCtrl-V"), _("Paste the image from clipboard") );
    item3->AppendSeparator();
    item3->Append( ID_MENU_OPTIONS, _("&Options"), _("Modify Aruspix options") );
    item0->Append( item3, _("&Edition") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( ID_HELP, _("&Help"), wxT("") );
    item4->Append( ID_ABOUT, _("&About ..."), _("Display 'About ...' dialog") );
    item0->Append( item4, _("&Help") );
    
    return item0;
}

// Implement toolbar functions

void MainToolBarFunc( wxToolBar *parent )
{
    parent->SetMargins( 2, 2 );
    
    parent->AddTool( ID_NEW, wxT(""), ToolBarBitmapFunc( 11 ), wxNullBitmap, wxITEM_NORMAL, _("New"), _("Create a new file") );
    parent->AddSeparator();
    parent->AddTool( ID_OPEN, wxT(""), ToolBarBitmapFunc( 8 ), wxNullBitmap, wxITEM_NORMAL, _("Open"), _("Open a file") );
    parent->AddTool( ID_SAVE, wxT(""), ToolBarBitmapFunc( 13 ), wxNullBitmap, wxITEM_NORMAL, _("Save"), _("Save the file") );
    parent->AddSeparator();
    parent->AddTool( ID_CUT, wxT(""), ToolBarBitmapFunc( 9 ), wxNullBitmap, wxITEM_NORMAL, _("Cut"), _("Cut the image and place it in the clipboard") );
    parent->AddTool( ID_COPY, wxT(""), ToolBarBitmapFunc( 10 ), wxNullBitmap, wxITEM_NORMAL, _("Copy"), _("Copy the image in the clipboard") );
    parent->AddTool( ID_PASTE, wxT(""), ToolBarBitmapFunc( 12 ), wxNullBitmap, wxITEM_NORMAL, _("Paste"), _("Paste the image from clipboard") );
    parent->AddSeparator();
    parent->AddTool( ID_UNDO, wxT(""), ToolBarBitmapFunc( 6 ), wxNullBitmap, wxITEM_NORMAL, _("Undo"), _("Undo last operation") );
    parent->AddTool( ID_REDO, wxT(""), ToolBarBitmapFunc( 7 ), wxNullBitmap, wxITEM_NORMAL, _("Redo"), _("Redo last operation") );
    
    parent->Realize();
}

// Implement bitmap functions

wxBitmap ToolBarBitmapFunc( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 4 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #808080",
        /* pixels */
        "                ",
        "  ccccccccc     ",
        "  cbbbbbbcbc    ",
        "  cbbbbbbcbbc   ",
        "  cbbbbbbcccc   ",
        "  cbbbbbbbbba   ",
        "  cbbbbbbbbba   ",
        "  cbbbbbbbbba   ",
        "  cbbbbbbbbba   ",
        "  cbbbbbbbbba   ",
        "  cbbbbbbbbba   ",
        "  cbbbbbbbbba   ",
        "  cbbbbbbbbba   ",
        "  cbbbbbbbbba   ",
        "  caaaaaaaaaa   "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 6 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #FFFF00",
        "e c #D4D0C9",
        "f c #808000",
        /* pixels */
        "                ",
        "          aaa   ",
        "         a  ea a",
        "              aa",
        "  aaa        aaa",
        " abcbaaaaaaa    ",
        " acbcbcbcbca    ",
        " abcbcbcbcba    ",
        " acbcbaaaaaaaaaa",
        " abcbafffffffffa",
        " acbafffffffffa ",
        " abafffffffffa  ",
        " aafffffffffa   ",
        " aaaaaaaaaaa    ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 2)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 4 1",
        "  c None",
        "a c Black",
        "c c #C0C0C0",
        "d c #808000",
        /* pixels */
        " aaaaaaaaaaaaaa ",
        " adaccccccccaca ",
        " adaccccccccaaa ",
        " adaccccccccada ",
        " adaccccccccada ",
        " adaccccccccada ",
        " adaccccccccada ",
        " addaaaaaaaadda ",
        " adddddddddddda ",
        " addaaaaaaaaada ",
        " addaaaaaaccada ",
        " addaaaaaaccada ",
        " addaaaaaaccada ",
        "  aaaaaaaaaaaaa ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 3)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "  c None",
        "a c Black",
        "b c #000080",
        /* pixels */
        "                ",
        "     a   a      ",
        "     a   a      ",
        "     a   a      ",
        "     aa aa      ",
        "      a a       ",
        "      aaa       ",
        "       a        ",
        "      bab       ",
        "      b bbb     ",
        "    bbb b  b    ",
        "   b  b b  b    ",
        "   b  b b  b    ",
        "   b  b  bb     ",
        "    bb          "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 4)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 4 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #000080",
        /* pixels */
        "                ",
        " aaaaaa         ",
        " abbbbaa        ",
        " abbbbaba       ",
        " abaabacccccc   ",
        " abbbbbcbbbbcc  ",
        " abaaaacbbbbcbc ",
        " abbbbbcbaabcccc",
        " abaaaacbbbbbbbc",
        " abbbbbcbaaaaabc",
        " aaaaaacbbbbbbbc",
        "       cbaaaaabc",
        "       cbbbbbbbc",
        "       ccccccccc",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 5)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 7 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #808080",
        "d c #000080",
        "e c #FFFF00",
        "g c #C0C0C0",
        /* pixels */
        "                ",
        "     aaaa       ",
        " aaaaaeeaaaaa   ",
        "acccaeaaeaccca  ",
        "accaggggggacca  ",
        "accaaaaaaaacca  ",
        "acccccccccccca  ",
        "acccccddddddda  ",
        "acccccdbbbbbdd  ",
        "acccccdbbbbbdbd ",
        "acccccdbdddbddd ",
        "acccccdbbbbbbbd ",
        "acccccdbdddddbd ",
        " aaaaadbbbbbbbd ",
        "      ddddddddd "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 6)
    {
        static const unsigned char data[] = 
        {
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,158,
            188,242,164,188,241,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,159,188,242,144,176,240,151,181,241,
            136,174,241,135,173,240,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,144,168,240,221,221,221,221,221,221,167,195,244,144,176,240,102,148,240,64,112,208,64,104,
            176,56,103,180,71,125,225,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            128,168,240,169,199,242,168,197,245,144,176,240,96,144,224,64,112,192,64,104,192,84,126,194,79,
            124,184,64,96,160,80,136,240,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,112,152,
            224,112,152,240,112,160,240,102,148,240,64,96,176,64,96,176,221,221,221,221,221,221,221,221,221,
            56,95,165,70,125,225,138,176,240,221,221,221,221,221,221,221,221,221,221,221,221,96,144,224,80,
            128,240,96,144,240,112,160,240,96,119,177,221,221,221,221,221,221,221,221,221,221,221,221,64,104,
            192,70,125,225,138,176,240,221,221,221,221,221,221,221,221,221,221,221,221,80,128,224,48,112,224,
            80,128,240,112,152,240,96,144,224,221,221,221,221,221,221,221,221,221,221,221,221,64,104,192,85,
            132,225,141,178,240,221,221,221,221,221,221,221,221,221,221,221,221,64,120,224,64,112,208,64,104,
            192,48,96,176,48,88,176,48,80,144,221,221,221,221,221,221,221,221,221,64,104,192,80,136,240,
            145,179,233,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,150,179,221,64,120,224,96,144,240,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,87,124,202,80,136,240,134,171,227,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,146,179,233,80,136,240,86,125,210,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,172,198,244,80,136,240,80,120,208,141,171,223,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            162,194,247,129,169,228,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 221, 221, 221);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 7)
    {
        static const unsigned char data[] = 
        {
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,164,188,241,158,188,242,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,135,173,240,136,174,241,151,181,241,144,176,240,
            159,188,242,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,71,125,225,56,103,180,64,104,176,64,112,208,102,148,240,144,176,
            240,167,195,244,221,221,221,221,221,221,144,168,240,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,80,136,240,64,96,160,79,124,184,84,126,194,64,104,192,64,112,192,96,144,224,144,
            176,240,168,197,245,169,199,242,128,168,240,221,221,221,221,221,221,221,221,221,221,221,221,138,176,
            240,70,125,225,56,95,165,221,221,221,221,221,221,221,221,221,64,96,176,64,96,176,102,148,240,
            112,160,240,112,152,240,112,152,224,221,221,221,221,221,221,221,221,221,221,221,221,138,176,240,70,
            125,225,64,104,192,221,221,221,221,221,221,221,221,221,221,221,221,96,119,177,112,160,240,96,144,
            240,80,128,240,96,144,224,221,221,221,221,221,221,221,221,221,221,221,221,141,178,240,85,132,225,
            64,104,192,221,221,221,221,221,221,221,221,221,221,221,221,96,144,224,112,152,240,80,128,240,48,
            112,224,80,128,224,221,221,221,221,221,221,221,221,221,221,221,221,145,179,233,80,136,240,64,104,
            192,221,221,221,221,221,221,221,221,221,48,80,144,48,88,176,48,96,176,64,104,192,64,112,208,
            64,120,224,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,96,144,240,64,120,224,150,
            179,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,134,171,227,80,136,240,87,124,202,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,86,125,210,80,136,240,146,179,
            233,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,141,171,223,80,120,208,80,136,240,172,
            198,244,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,129,169,228,162,194,247,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 221, 221, 221);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 8)
    {
        static const unsigned char data[] = 
        {
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,128,144,160,128,136,160,128,152,176,149,172,200,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            96,120,144,148,173,208,221,221,221,221,221,221,128,144,160,221,221,221,96,120,144,204,212,218,176,
            168,144,176,168,144,176,168,144,176,168,144,176,168,144,188,193,191,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,80,104,144,80,104,144,176,168,144,224,208,160,
            240,240,176,240,240,176,255,240,160,255,232,160,176,160,144,188,195,189,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,80,104,144,80,104,144,80,104,144,176,160,144,240,240,160,240,240,
            176,255,240,160,255,232,160,255,232,160,255,216,112,160,160,144,160,152,128,160,152,128,160,144,128,
            144,144,128,144,136,112,221,221,221,221,221,221,221,221,221,176,160,144,240,232,160,255,240,160,255,
            232,160,255,232,160,255,216,128,255,216,96,255,216,96,255,216,96,255,216,96,255,216,96,255,216,
            96,144,136,112,221,221,221,221,221,221,221,221,221,160,160,144,240,232,160,255,232,160,255,232,160,
            192,176,144,192,176,144,176,168,144,176,168,144,176,160,128,176,160,128,160,152,128,160,152,128,160,
            144,128,160,144,128,144,136,128,144,136,112,160,152,128,240,224,144,255,232,160,224,200,128,176,168,
            144,255,224,128,255,224,128,255,224,128,255,224,128,255,224,128,255,224,128,255,224,128,255,216,112,
            255,216,112,208,168,80,129,131,138,160,152,128,240,224,144,255,224,144,176,168,144,192,184,144,255,
            216,112,255,216,96,255,216,96,255,216,96,255,208,96,255,208,80,255,200,80,240,184,64,224,160,
            48,115,101,74,221,221,221,160,144,128,240,216,128,224,200,128,176,168,144,255,224,128,255,208,112,
            255,216,96,255,208,96,255,208,96,255,200,80,240,192,64,240,184,64,240,176,48,128,104,32,221,
            221,221,221,221,221,160,144,128,240,208,128,176,168,144,208,192,144,255,216,112,255,208,96,255,208,
            96,255,200,80,255,192,80,240,184,64,240,176,48,240,168,48,208,136,16,96,72,32,221,221,221,
            221,221,221,144,136,128,208,192,128,176,168,144,255,224,128,255,208,96,255,200,80,255,200,80,240,
            192,64,240,176,48,240,168,48,224,160,32,208,144,16,128,104,32,86,89,96,221,221,221,221,221,
            221,144,136,112,176,160,144,208,176,112,208,144,0,208,144,0,208,144,0,192,144,0,192,136,16,
            176,128,16,176,128,16,160,120,32,144,112,32,96,72,32,221,221,221,221,221,221,221,221,221,144,
            136,112,144,128,96,128,120,96,128,112,80,112,96,80,96,88,64,80,72,64,64,56,48,48,48,
            32,48,32,32,32,24,16,16,16,16,32,16,16,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 221, 221, 221);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 9)
    {
        static const unsigned char data[] = 
        {
            221,221,221,221,221,221,221,221,221,221,221,221,190,198,218,165,175,185,221,221,221,221,221,221,221,
            221,221,222,223,225,147,160,175,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,196,215,237,144,152,160,195,214,240,221,221,221,221,236,253,
            176,176,192,154,176,202,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,144,152,176,166,184,204,221,221,221,222,231,240,96,112,
            128,168,190,218,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,177,179,195,144,144,160,205,215,229,192,200,208,80,96,112,168,
            190,218,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,174,186,210,144,152,160,158,169,182,112,128,144,86,88,105,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,191,206,228,112,128,144,96,112,128,80,96,112,104,117,132,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,102,118,135,80,96,112,80,104,128,152,173,203,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,130,164,243,80,128,224,117,152,221,80,120,208,86,125,210,120,155,222,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,102,148,240,87,
            133,225,72,96,165,66,97,157,72,118,195,80,120,208,64,104,192,116,145,197,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,120,165,232,80,136,224,64,104,176,
            48,80,144,95,124,177,80,120,208,221,221,221,142,173,220,48,80,144,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,80,136,224,221,221,221,180,203,237,48,80,
            144,221,221,221,80,120,208,174,201,241,134,159,201,48,64,112,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,80,128,224,184,207,243,153,177,223,48,80,128,221,
            221,221,102,139,203,64,96,176,48,64,96,40,42,59,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,104,140,216,64,96,176,48,80,144,53,76,100,221,221,221,
            221,221,221,56,65,105,41,65,104,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,67,105,157,57,66,105,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 221, 221, 221);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 10)
    {
        static const unsigned char data[] = 
        {
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,178,194,
            226,174,196,222,178,191,210,178,191,210,178,191,210,162,178,210,186,202,230,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,178,194,226,255,
            255,255,254,254,254,254,254,254,254,250,254,162,175,194,98,130,162,174,196,222,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,178,191,210,255,255,255,
            255,255,255,255,255,255,250,254,254,146,170,194,200,205,210,102,112,130,174,196,222,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,178,191,210,254,254,254,194,218,
            254,178,210,254,210,226,242,144,153,174,174,202,242,171,192,239,178,194,242,162,186,242,146,178,242,
            146,178,242,158,190,238,221,221,221,221,221,221,221,221,221,162,175,194,254,254,254,254,254,254,254,
            250,254,242,242,254,226,234,242,177,198,238,254,254,254,250,254,254,254,254,254,250,254,254,130,170,
            242,50,106,195,135,173,228,221,221,221,221,221,221,162,175,194,255,255,255,162,202,254,146,178,242,
            130,178,226,114,159,229,158,190,238,255,255,255,255,255,255,255,255,255,254,250,254,114,159,229,177,
            198,238,42,85,170,138,170,222,221,221,221,146,170,194,255,255,255,237,246,254,240,236,240,226,234,
            242,210,226,242,162,186,226,255,255,255,146,178,254,146,178,254,210,218,242,98,146,227,42,85,170,
            42,85,170,42,85,170,221,221,221,146,162,178,237,246,254,130,178,226,114,159,229,114,159,229,114,
            150,210,138,170,222,254,254,254,255,255,255,254,254,254,237,246,254,226,234,242,190,206,242,162,178,
            210,33,70,144,221,221,221,146,162,178,242,242,254,210,226,242,210,218,226,194,210,226,194,202,226,
            128,160,228,254,254,254,130,170,242,114,159,229,98,146,227,82,130,210,82,130,210,162,178,210,42,
            85,170,221,221,221,144,153,174,50,74,98,50,74,98,50,74,98,50,74,98,50,74,98,114,150,
            210,255,255,255,254,254,254,232,238,250,210,218,242,190,206,242,171,192,239,162,175,194,33,70,144,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,98,138,210,254,
            254,250,98,146,227,82,130,210,82,130,210,82,130,210,82,130,210,162,175,194,33,70,144,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,74,118,194,237,246,254,
            162,178,210,162,178,210,162,178,210,162,175,194,162,175,194,146,170,194,33,70,144,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,74,118,194,42,85,170,42,85,
            170,42,85,170,33,70,144,33,70,144,33,70,144,33,70,144,33,70,144,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
            221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 221, 221, 221);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 11)
    {
        static const unsigned char data[] = 
        {
            255,0,255,255,0,255,176,192,224,176,192,224,176,192,224,176,192,224,176,192,224,176,192,208,176,
            184,208,160,176,208,173,192,224,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
            255,255,0,255,176,192,224,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
            160,168,192,48,72,96,170,190,224,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,
            0,255,176,192,208,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,144,168,
            192,192,200,208,48,72,96,167,189,223,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,
            176,184,208,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,144,160,176,48,
            72,96,48,72,96,48,72,96,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,160,184,
            208,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,144,160,176,
            144,160,176,48,72,96,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,160,176,208,255,
            255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,248,255,240,240,240,144,160,
            176,48,72,96,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,160,176,192,255,255,255,
            255,255,255,255,255,255,255,255,255,255,255,255,255,248,255,240,240,240,224,232,240,144,160,176,48,
            72,96,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,160,168,192,255,255,255,255,255,
            255,255,255,255,255,255,255,255,255,255,240,248,255,224,232,240,224,224,240,144,160,176,48,72,96,
            255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,144,168,192,255,255,255,255,255,255,255,
            255,255,255,255,255,240,248,255,240,240,240,224,232,240,208,216,240,144,160,176,48,72,96,255,0,
            255,255,0,255,255,0,255,255,0,255,255,0,255,144,160,176,255,255,255,255,255,255,255,255,255,
            255,255,255,240,240,255,224,232,240,224,224,240,208,216,224,144,160,176,48,72,96,255,0,255,255,
            0,255,255,0,255,255,0,255,255,0,255,144,160,176,255,255,255,255,255,255,255,255,255,240,248,
            255,240,240,240,224,224,240,208,216,240,192,208,224,144,160,176,48,72,96,255,0,255,255,0,255,
            255,0,255,255,0,255,255,0,255,144,160,176,255,255,255,255,255,255,255,248,255,240,240,240,224,
            232,240,208,224,240,208,208,224,192,200,224,144,160,176,48,72,96,255,0,255,255,0,255,255,0,
            255,255,0,255,255,0,255,144,160,176,255,255,255,144,160,176,144,160,176,144,160,176,144,160,176,
            144,160,176,144,160,176,144,160,176,144,160,176,48,72,96,255,0,255,255,0,255,255,0,255,255,
            0,255,255,0,255,144,160,176,48,72,96,48,72,96,48,72,96,48,72,96,48,72,96,48,72,
            96,48,72,96,48,72,96,48,72,96,48,72,96,255,0,255,255,0,255,255,0,255,255,0,255,
            255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,
            0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 255, 0, 255);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 12)
    {
        static const unsigned char data[] = 
        {
            255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,192,176,128,192,176,128,176,160,128,255,
            0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
            255,176,168,144,176,168,144,176,168,144,160,144,96,240,232,160,240,232,160,224,216,144,112,104,64,
            144,136,112,144,136,128,144,136,112,255,0,255,255,0,255,255,0,255,255,0,255,176,168,144,240,
            240,176,255,240,176,240,240,160,160,152,112,240,240,160,129,126,111,208,200,128,128,112,80,128,96,
            48,240,192,96,240,184,32,112,96,80,255,0,255,255,0,255,255,0,255,176,168,144,255,240,176,
            255,240,176,144,136,96,208,200,144,240,232,144,224,216,128,224,200,96,176,152,80,96,88,64,160,
            128,32,208,144,0,112,88,80,255,0,255,255,0,255,255,0,255,176,160,144,255,240,176,255,240,
            160,144,128,96,128,112,96,128,112,80,112,104,80,112,104,80,112,96,80,112,88,64,144,112,32,
            208,144,0,96,72,64,255,0,255,255,0,255,255,0,255,160,160,144,255,240,176,255,232,160,240,
            224,144,240,208,112,208,160,16,208,160,16,208,160,16,208,152,16,208,144,0,208,144,0,208,144,
            0,64,56,48,255,0,255,255,0,255,255,0,255,160,152,128,240,232,160,240,224,128,240,216,112,
            240,208,80,240,176,16,144,160,176,144,152,176,128,144,176,128,136,160,112,128,160,96,120,144,96,
            112,144,255,0,255,255,0,255,255,0,255,160,152,128,240,224,144,240,216,96,240,200,80,240,192,
            48,240,176,16,144,152,176,255,255,255,255,255,255,255,248,255,240,240,240,224,232,240,80,104,128,
            80,96,128,255,0,255,255,0,255,160,144,128,240,216,128,240,200,64,240,192,48,240,184,16,224,
            160,0,128,144,176,255,255,255,160,176,192,160,176,192,160,168,192,208,224,240,80,96,128,192,200,
            208,64,80,96,255,0,255,144,136,128,240,208,112,240,192,48,240,184,16,240,168,0,224,160,0,
            128,136,160,255,248,255,240,240,240,224,232,240,208,216,240,192,208,224,80,88,112,64,80,96,64,
            72,80,64,64,64,144,136,112,240,200,112,240,184,16,240,176,16,224,168,0,208,152,0,112,128,
            160,240,240,240,160,176,192,160,176,192,160,168,192,144,160,176,176,192,208,144,160,176,144,160,176,
            64,48,32,144,128,112,240,184,32,208,144,0,208,144,0,208,144,0,208,144,0,96,120,144,224,
            232,240,208,216,240,192,208,224,192,200,224,176,192,208,176,184,208,176,184,208,144,160,176,64,48,
            32,255,0,255,144,128,96,112,96,80,96,80,64,80,64,48,64,48,32,96,112,144,208,224,240,
            144,160,176,144,160,176,144,160,176,144,160,176,144,160,176,144,160,176,144,160,176,64,48,32,255,
            0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,80,104,128,64,48,32,64,48,
            32,64,48,32,64,48,32,64,48,32,64,48,32,64,48,32,64,48,32,64,48,32,255,0,255,
            255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,
            0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 255, 0, 255);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 13)
    {
        static const unsigned char data[] = 
        {
            255,0,255,176,184,240,176,184,240,176,176,240,176,176,240,176,168,240,160,160,240,160,152,224,144,
            144,224,144,144,224,144,136,224,128,128,224,128,120,208,112,120,208,112,112,208,255,0,255,255,0,
            255,176,176,240,192,192,255,144,144,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
            255,255,255,255,255,255,240,248,255,80,88,192,96,88,176,96,88,176,255,0,255,255,0,255,176,
            176,240,192,192,255,144,136,240,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
            255,240,248,255,240,240,240,64,80,192,48,48,96,80,88,176,255,0,255,255,0,255,160,168,240,
            192,192,255,128,128,224,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,248,255,240,
            240,240,224,232,240,48,80,176,128,120,224,80,80,160,255,0,255,255,0,255,160,160,240,192,192,
            255,112,120,224,255,255,255,255,255,255,255,255,255,255,255,255,240,248,255,240,240,240,224,232,240,
            208,216,240,48,72,176,112,112,208,80,80,160,255,0,255,255,0,255,160,152,224,192,192,255,112,
            112,208,255,255,255,255,255,255,255,255,255,240,248,255,240,240,240,224,232,240,208,216,240,192,208,
            224,32,64,160,96,104,208,80,80,160,255,0,255,255,0,255,144,144,224,192,192,255,96,104,208,
            255,255,255,255,255,255,240,248,255,240,240,240,224,232,240,208,216,240,192,208,224,192,200,224,16,
            56,160,96,96,192,80,72,144,255,0,255,255,0,255,144,136,224,192,184,255,176,184,255,96,96,
            208,80,96,192,80,88,192,64,80,192,48,80,176,48,72,176,32,64,160,16,56,160,96,96,192,
            80,88,192,64,72,144,255,0,255,255,0,255,128,128,224,176,176,255,176,176,255,160,160,255,144,
            144,240,128,136,240,128,128,224,128,120,224,112,112,208,112,104,208,96,96,192,80,88,192,80,80,
            176,64,72,144,255,0,255,255,0,255,128,120,208,176,168,255,160,160,255,144,144,240,80,88,112,
            80,88,112,80,88,112,80,88,112,80,96,112,96,104,128,80,88,192,80,80,176,64,72,176,64,
            64,128,255,0,255,255,0,255,112,120,208,160,160,255,144,144,240,128,136,240,80,88,112,0,0,
            0,48,64,64,208,216,240,208,224,240,96,120,128,64,72,176,64,72,176,64,64,160,64,64,128,
            255,0,255,255,0,255,112,112,208,160,152,255,128,136,240,128,128,224,80,88,112,48,64,64,112,
            120,144,224,224,240,224,232,240,112,128,144,48,64,160,64,64,160,48,64,160,64,56,128,255,0,
            255,255,0,255,112,104,208,144,144,240,128,128,224,32,72,176,32,48,64,176,184,192,176,184,192,
            192,192,208,192,200,208,80,80,80,48,64,160,48,64,160,48,56,160,64,56,112,255,0,255,255,
            0,255,255,0,255,96,104,192,80,88,176,80,80,160,80,80,160,80,80,160,80,72,144,64,72,
            144,64,72,144,64,64,128,64,56,128,64,56,128,64,56,112,48,56,112,255,0,255,255,0,255,
            255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,
            0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 255, 0, 255);
        wxBitmap bitmap( image );
        return bitmap;
    }
    return wxNullBitmap;
}

wxBitmap EnvBitmapFunc( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "a c #FFFFFF",
        "b c #FF0000",
        /* pixels */
        "baaaaaaaaaaaaaab",
        "abaaaaaaaaaaaaba",
        "aabaaaaaaaaaabaa",
        "aaabaaaaaaaabaaa",
        "aaaabaaaaaabaaaa",
        "aaaaabaaaabaaaaa",
        "aaaaaabaabaaaaaa",
        "aaaaaaabbaaaaaaa",
        "aaaaaabaabaaaaaa",
        "aaaaabaaaabaaaaa",
        "aaaabaaaaaabaaaa",
        "aaabaaaaaaaabaaa",
        "aabaaaaaaaaaabaa",
        "abaaaaaaaaaaaaba",
        "baaaaaaaaaaaaaab"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 4 1",
        "a c Black",
        "b c #FFFFFF",
        "c c #808080",
        "d c #0000FF",
        /* pixels */
        "dddddddddddddddd",
        "dddddddddddddddd",
        "acccccccccccccca",
        "abbbbbbccbbbbbba",
        "abbbbbbccbbbbbba",
        "abbbbbbccbbbbbba",
        "abbbbbbccbbbbbba",
        "abbbbbbccbbbbbba",
        "abbbbbbccbbbbbba",
        "abbbbbbccbbbbbba",
        "abbbbbbccbbbbbba",
        "abbbbbbccbbbbbba",
        "abbbbbbccbbbbbba",
        "abbbbbbccbbbbbba",
        "aaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 2)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 4 1",
        "a c Black",
        "b c #FFFFFF",
        "c c #808080",
        "d c #0000FF",
        /* pixels */
        "dddddddddddddddd",
        "dddddddddddddddd",
        "acccccccccccccca",
        "abbbbbbbcbbbbbba",
        "abbbbbbbcbbbbbba",
        "abbbbbbbcbbbbbba",
        "abbbbbbbcbbbbbba",
        "abbbbbbbcbbbbbba",
        "abbbbbbbccccccca",
        "abbbbbbbcbbbbbba",
        "abbbbbbbcbbbbbba",
        "abbbbbbbcbbbbbba",
        "abbbbbbbcbbbbbba",
        "abbbbbbbcbbbbbba",
        "aaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 3)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 5 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #808080",
        "d c #0000FF",
        /* pixels */
        "dddddddddddddddd",
        "dddddddddddddddd",
        "acccccccccccccca",
        "abbbbbbbbbbbbbba",
        "abbbbbbbbbbbbbba",
        "abbbbbbbbbbbbbba",
        "abbbbbbbbbbbbbba",
        "abbbbbbbbbbbbbba",
        "acccccccccccccca",
        "a              a",
        "a              a",
        "a              a",
        "a              a",
        "a              a",
        "aaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 4)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "  c None",
        "a c Black",
        "b c #808080",
        /* pixels */
        "     aab        ",
        "     a a        ",
        "     a a        ",
        "  aaaaaaaaaaaaaa",
        "     aa         ",
        "  aaaaaaaaaaaaaa",
        "   aba          ",
        "  aaaaaaaaaaaaaa",
        "  ab a ab       ",
        "  aaaaaaaaaaaaaa",
        "   a a ab       ",
        "  aaaaaaaaaaaaaa",
        "     a          ",
        "   a a          ",
        "   aab          "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
