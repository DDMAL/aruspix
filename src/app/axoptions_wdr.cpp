//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: axoptions.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "axoptions_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "axoptions_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *OptionsDlgFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxNotebook *item2 = new wxNotebook( parent, ID_NOTEBOOK_OP, wxDefaultPosition, wxSize(450,500), 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item1 = new wxNotebookSizer( item2 );
#else
    wxWindow *item1 = item2;
#endif

    wxPanel *item3 = new wxPanel( item2, -1 );
    Rec1DlgFunc( item3, FALSE );
    item2->AddPage( item3, _("Images") );

    wxPanel *item4 = new wxPanel( item2, -1 );
    Sup1DlgFunc( item4, FALSE );
    item2->AddPage( item4, _("System") );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item6 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item5, 0, wxALIGN_CENTER|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *System1DlgFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, IDO_TEXT, _("Language"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs3[] = 
    {
        _("English"), 
        _("French")
    };
    wxComboBox *item3 = new wxComboBox( parent, ID_CB_LANGUAGE_OPS, wxT(""), wxDefaultPosition, wxSize(100,-1), 2, strs3, wxCB_DROPDOWN );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, IDO_TEXT, _("Aruspix documents"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_DOCUMENTS_DIR, wxT(""), wxDefaultPosition, wxSize(280,-1), 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_BROWSE_DOCUMENTS_DIR, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item8 = new wxStaticText( parent, IDO_TEXT, _("Working directory"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_WORKING_DIR, wxT(""), wxDefaultPosition, wxSize(280,-1), 0 );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, ID_BROWSE_WORKING_DIR, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item12 = new wxStaticLine( parent, IDO_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item15 = new wxStaticText( parent, IDO_TEXT, _("Music font"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item16 = new wxStaticText( parent, ID_FONT_NAME, wxT(""), wxDefaultPosition, wxSize(240,-1), 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item17 = new wxButton( parent, ID_CHOOSE_FONT, _("Choose Font"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxFlexGridSizer *item18 = new wxFlexGridSizer( 3, 0, 0 );

    wxFlexGridSizer *item19 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item20 = new wxStaticText( parent, IDO_TEXT, _("Size (%)"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item21 = new wxSpinCtrl( parent, ID_SC_MUS_SIZE, wxT("100"), wxDefaultPosition, wxSize(70,-1), 0, 50, 200, 100 );
    item19->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item22 = new wxStaticText( parent, IDO_TEXT, _("Vertical offset"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item22, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item23 = new wxSpinCtrl( parent, ID_SC_MUS_OFFSET, wxT("0"), wxDefaultPosition, wxSize(70,-1), 0, -50, 50, 0 );
    item19->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( item19, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item18->Add( 10, 120, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    wxPanel *item24 = new wxPanel( parent, ID_PANEL_WINKEY, wxDefaultPosition, wxSize(100,100), 0 );
    item18->Add( item24, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item13->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item25 = new wxStaticLine( parent, IDO_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item26 = new wxStaticText( parent, IDO_TEXT, _("Images"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item27 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item28 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item29 = new wxStaticText( parent, IDO_TEXT, _("Grayscale interpolation"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item30 = new wxCheckBox( parent, ID_CB_GRAY_OPI, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item30->SetValue( TRUE );
    item28->Add( item30, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item31 = new wxStaticText( parent, IDO_TEXT, _("Reduce big images"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item31, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item32 = new wxCheckBox( parent, ID_CB_REDUCE_OPI, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item32->SetValue( TRUE );
    item28->Add( item32, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item33 = new wxStaticText( parent, IDO_TEXT, _("Maximum size"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item33, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item34 = new wxTextCtrl( parent, ID_TC_MAXSIZE_OPI, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item28->Add( item34, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item35 = new wxStaticText( parent, IDO_TEXT, _("Check if negative (based on mean)"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item35, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item36 = new wxCheckBox( parent, ID_CB_NEGATIVE_OPI, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item36->SetValue( TRUE );
    item28->Add( item36, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item37 = new wxStaticText( parent, IDO_TEXT, 
        _("Image analysis binarization\n"
          ""),
        wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item37, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxString strs38[] = 
    {
        _("Otsu"), 
        _("Min Max"), 
        _("Brink (2 Classes)"), 
        _("Brink (3 Classes)")
    };
    wxChoice *item38 = new wxChoice( parent, ID_C_IMAGE_BINARIZATION, wxDefaultPosition, wxSize(145,-1), 4, strs38, 0 );
    item28->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item27, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *Rec1DlgFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableCol( 1 );
    item0->AddGrowableRow( 0 );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Pre-treatment") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxFlexGridSizer *item4 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item5 = new wxStaticText( parent, IDO_TEXT, _("Find borders"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item6 = new wxCheckBox( parent, ID4_CHB_BORDERS_POS, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item7 = new wxStaticText( parent, IDO_TEXT, _("Find text and lyrics"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item7, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, ID4_CHB_TEXT_POS, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item9 = new wxStaticText( parent, IDO_TEXT, _("Find ornate letters"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item9, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item10 = new wxCheckBox( parent, ID4_CHB_TEXT_INIT, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, IDO_TEXT, _("Find text in staves"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item11, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item12 = new wxCheckBox( parent, ID4_CHB_STAVES_SEG, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxFlexGridSizer *item13 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item14 = new wxStaticText( parent, IDO_TEXT, _("Top margin"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item15 = new wxSpinCtrl( parent, ID4_MARGIN_TOP, wxT("0"), wxDefaultPosition, wxSize(80,-1), 0, 0, 250, 0 );
    item13->Add( item15, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item16 = new wxStaticText( parent, IDO_TEXT, _("Bottom margin"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item16, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item17 = new wxSpinCtrl( parent, ID4_MARGIN_BOTTOM, wxT("0"), wxDefaultPosition, wxSize(80,-1), 0, 0, 250, 0 );
    item13->Add( item17, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item18 = new wxStaticText( parent, IDO_TEXT, _("Left margin"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item18, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 5 );

    wxSpinCtrl *item19 = new wxSpinCtrl( parent, ID4_MARGIN_LEFT, wxT("0"), wxDefaultPosition, wxSize(80,-1), 0, 0, 100, 0 );
    item13->Add( item19, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item20 = new wxStaticText( parent, IDO_TEXT, _("Right margin"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item20, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item21 = new wxSpinCtrl( parent, ID4_MARGIN_RIGHT, wxT("0"), wxDefaultPosition, wxSize(80,-1), 0, 0, 100, 0 );
    item13->Add( item21, 0, wxALIGN_CENTER, 5 );

    item3->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item22 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item23 = new wxStaticText( parent, IDO_TEXT, _("Document condition"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs24[] = 
    {
        _("Brink (2 Classes)"), 
        _("Sauvola"), 
        _("Brink (3 Classes)")
    };
    wxChoice *item24 = new wxChoice( parent,  ID4_BINARIZATION, wxDefaultPosition, wxSize(140,-1), 3, strs24, 0 );
    item22->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item22, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item26 = new wxStaticText( parent, IDO_TEXT, _("Region size (uneven lighting)"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item27 = new wxSpinCtrl( parent, ID4_BIN_REGION_SIZE, wxT("15"), wxDefaultPosition, wxSize(60,-1), 0, 3, 50, 15 );
    item25->Add( item27, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5 );

    item1->Add( item25, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item29 = new wxCheckBox( parent, ID4_BINARIZATION_SELECT, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxStaticText *item30 = new wxStaticText( parent, IDO_TEXT, _("Show selection dialog at run time"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item28, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxButton *item31 = new wxButton( parent, ID4_PRE_DEFAULT, _("Default values"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    wxStaticBox *item33 = new wxStaticBox( parent, -1, _("Typographic model") );
    wxStaticBoxSizer *item32 = new wxStaticBoxSizer( item33, wxVERTICAL );

    wxFlexGridSizer *item34 = new wxFlexGridSizer( 2, 0, 0 );

    wxBoxSizer *item35 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item36 = new wxTextCtrl( parent, ID4_REC_TYP_MODELS, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item35->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item37 = new wxButton( parent, ID4_REC_BT_TYP_MODELS, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    item34->Add( item35, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item32->Add( item34, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item32, 0, wxGROW|wxALL, 5 );

    wxStaticBox *item39 = new wxStaticBox( parent, -1, _("Music model") );
    wxStaticBoxSizer *item38 = new wxStaticBoxSizer( item39, wxVERTICAL );

    wxFlexGridSizer *item40 = new wxFlexGridSizer( 2, 0, 0 );

    wxBoxSizer *item41 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item42 = new wxTextCtrl( parent, ID4_REC_MUS_MODELS, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item41->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item43 = new wxButton( parent, ID4_REC_BT_MUS_MODELS, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    item40->Add( item41, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item38->Add( item40, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item44 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item45 = new wxStaticText( parent, IDO_TEXT, _("Delayed"), wxDefaultPosition, wxDefaultSize, 0 );
    item44->Add( item45, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item46 = new wxCheckBox( parent, ID4_REC_DELAYED, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item46->SetValue( TRUE );
    item44->Add( item46, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item47 = new wxStaticText( parent, IDO_TEXT, _("Order"), wxDefaultPosition, wxDefaultSize, 0 );
    item44->Add( item47, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item48 = new wxSpinCtrl( parent, ID4_REC_LMORDER, wxT("0"), wxDefaultPosition, wxSize(50,-1), 0, 0, 5, 0 );
    item44->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item49 = new wxStaticText( parent, IDO_TEXT, _("Scaling factor (1.0)"), wxDefaultPosition, wxDefaultSize, 0 );
    item44->Add( item49, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item50 = new wxTextCtrl( parent, ID4_LMSCALING, wxT(""), wxDefaultPosition, wxSize(50,-1), 0 );
    item44->Add( item50, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( item44, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item38, 0, wxGROW|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *Sup1DlgFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, IDO_TEXT, _("Vertical size (in pixels)"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID2_TC_SIZE_OPS1, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item4 = new wxStaticText( parent, IDO_TEXT, _("Interpolation"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs5[] = 
    {
        _("None"), 
        _("Bi-linear"), 
        _("Bi-cubic")
    };
    wxChoice *item5 = new wxChoice( parent, ID2_CC_INTERP_OPS1, wxDefaultPosition, wxSize(100,-1), 3, strs5, 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item6 = new wxStaticText( parent, IDO_TEXT, _("Horizontal segmentation"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item7 = new wxSpinCtrl( parent, ID2_SC_SPLITX_OPS1, wxT("3"), wxDefaultPosition, wxSize(50,-1), 0, 1, 10, 3 );
    item1->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item8 = new wxStaticText( parent, IDO_TEXT, _("Vertical segmentation"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item9 = new wxSpinCtrl( parent, ID2_SC_SPLITY_OPS1, wxT("8"), wxDefaultPosition, wxSize(50,-1), 0, 1, 20, 8 );
    item1->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item10 = new wxStaticText( parent, IDO_TEXT, _("Width of the correlation window"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item11 = new wxSpinCtrl( parent, ID2_SC_CORRX_OPS1, wxT("30"), wxDefaultPosition, wxSize(50,-1), 0, 10, 100, 30 );
    item1->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item12 = new wxStaticText( parent, IDO_TEXT, _("Height of the correlation window"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item12, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item13 = new wxSpinCtrl( parent, ID2_SC_CORRY_OPS1, wxT("50"), wxDefaultPosition, wxSize(50,-1), 0, 10, 100, 50 );
    item1->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item14 = new wxStaticText( parent, IDO_TEXT, _("Filter image 1"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item14, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item15 = new wxCheckBox( parent, ID2_CH_FILTER1_OPS1, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item15->SetValue( TRUE );
    item1->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 10 );

    wxStaticText *item16 = new wxStaticText( parent, IDO_TEXT, _("Filter image 2"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item16, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item17 = new wxCheckBox( parent, ID2_CH_FILTER2_OPS1, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item17->SetValue( TRUE );
    item1->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 10 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *BinSelectDlgFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID0_TEXTPgBin, _("Document condition"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs3[] = 
    {
        _("Brink (2 Classes)"), 
        _("Sauvola"), 
        _("Brink (3 Classes)")
    };
    wxChoice *item3 = new wxChoice( parent, ID0_BIN_CHOICE, wxDefaultPosition, wxSize(140,-1), 3, strs3, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID0_TEXTRgnSize, _("Region Size (uneven lighting)"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    item4->Add( item5, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item6 = new wxSpinCtrl( parent, ID0_RGN_SIZE_SPINCTRL, wxT("15"), wxDefaultPosition, wxSize(55,-1), 0, 3, 50, 15 );
    item4->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    item0->Add( item4, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxStaticLine *item7 = new wxStaticLine( parent, ID0_LINE1, wxDefaultPosition, wxSize(300,-1), wxLI_HORIZONTAL );
    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, ID0_DEACTIVATE_DIALOG_CHECKBOX, _("Deactivate this dialog"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
