//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: sup.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "sup_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "sup_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *WindowFunc2( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );

    wxSplitterWindow *item1 = new wxSplitterWindow( parent, ID2_SPLITTER1, wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxGROW|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *SupFunc2( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );

    CmpCtrl *item1 = new CmpCtrl( parent, ID2_TREEBOOK, wxDefaultPosition, wxSize(120,160), wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER );
    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    wxStaticLine *item2 = new wxStaticLine( parent, ID2_LINE2, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item3 = new wxStaticText( parent, ID2_PREVIEW, "No image", wxDefaultPosition, wxSize(200,200) );
    item0->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item4 = new wxCheckBox( parent, ID2_CB_PREVIEW, _("Preview"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *SupFuncData2( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableCol( 1 );
    item0->AddGrowableRow( 0 );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Book information") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxFlexGridSizer *item3 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item4 = new wxStaticText( parent, ID2_TEXT, _("RISM"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID2_RISM, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID2_TEXT, _("Composer"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item6, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID2_COMPOSER, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID2_TEXT, _("Title"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID2_TITLE, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID2_TEXT, _("Printer"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID2_PRINTER, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item12 = new wxStaticText( parent, ID2_TEXT, _("Year"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item12, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item13 = new wxTextCtrl( parent, ID2_YEAR, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID2_TEXT, _("Library 1"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item14, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID2_LIBRARY1, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item16 = new wxStaticText( parent, ID2_TEXT, _("Library 2"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item16, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, ID2_LIBRARY2, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxALIGN_CENTER, 5 );

    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    wxStaticBox *item19 = new wxStaticBox( parent, -1, _("File directories") );
    wxStaticBoxSizer *item18 = new wxStaticBoxSizer( item19, wxVERTICAL );

    wxStaticText *item20 = new wxStaticText( parent, ID2_TEXT, _("Images 1"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item21 = new wxFlexGridSizer( 2, 0, 0 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID2_BOOK_IMAGES1, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item24 = new wxButton( parent, ID2_ON_BOOK_IMAGES1, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item21->Add( item22, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item18->Add( item21, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item25 = new wxStaticText( parent, ID2_TEXT, _("Images 2"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item25, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item26 = new wxFlexGridSizer( 2, 0, 0 );

    wxBoxSizer *item27 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item28 = new wxTextCtrl( parent, ID2_BOOK_IMAGES2, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item29 = new wxButton( parent, ID2_ON_BOOK_IMAGES2, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item26->Add( item27, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item18->Add( item26, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item30 = new wxStaticText( parent, ID2_TEXT, _("Aruspix files"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item30, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item31 = new wxFlexGridSizer( 2, 0, 0 );

    wxBoxSizer *item32 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item33 = new wxTextCtrl( parent, ID2_BOOK_AXFILES, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item32->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item34 = new wxButton( parent, ID2_ON_BOOK_AXFILES, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    item31->Add( item32, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item18->Add( item31, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item18, 0, wxGROW|wxALL, 5 );

    wxBoxSizer *item35 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item36 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item37 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *MenuBarFunc2()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->AppendSeparator();
    item1->Append( ID2_OPEN1, _("Open source &1"), _("Open the file of the source 1") );
    item1->Append( ID2_OPEN2, _("Open source &2"), _("Open the file of the source 2") );
    item0->Append( item1, _("commun1") );
    
    wxMenu* item2 = new wxMenu;
    item2->AppendSeparator();
    item2->Append( ID2_POINTS, _("Put points"), _("Put the 3 superimposition points on both sources") );
    item0->Append( item2, _("commun2") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( ID2_PREVIOUS, _("&Previous page"), _("Go to the previous page in both files or directories") );
    item3->Append( ID2_PREVIOUS1, _("P&revious page (source 1)"), _("Go to the previous page in the file or directory of source 1") );
    item3->Append( ID2_PREVIOUS2, _("Pr&evious page (source 2)"), _("Go to the previous page in the file or directory of source 2") );
    item3->AppendSeparator();
    item3->Append( ID2_NEXT, _("&Next page"), _("Go to the next page in both files or directories") );
    item3->Append( ID2_NEXT1, _("Ne&xt page (source 1)"), _("Go to the next page in the file or directory of source 1") );
    item3->Append( ID2_NEXT2, _("Nex&t page (source 2)"), _("Go to the next page in the file or directory of source 2") );
    item3->AppendSeparator();
    item3->Append( ID2_GOTO1, _("&Go to page ... (source 1)"), _("Select a page in the file or directory of source 1") );
    item3->Append( ID2_GOTO2, _("G&o to page ... (source 2)"), _("Select a page in the file or directory of source 2") );
    item0->Append( item3, _("&Page") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( ID2_SUPERIMPOSE, _("&Superimpose sources"), _("Execute the superimposition of the sources") );
    item0->Append( item4, _("&Tools") );
    
    return item0;
}

// Implement toolbar functions

void ToolBarFunc2( wxToolBar *parent )
{
    parent->SetMargins( 2, 2 );
    
    parent->AddTool( ID2_OPEN1, wxT(""), BitmapsFunc2( 0 ), wxNullBitmap, wxITEM_NORMAL, _("Open source 1"), _("Open the file of the source 1") );
    parent->AddTool( ID2_OPEN2, wxT(""), BitmapsFunc2( 1 ), wxNullBitmap, wxITEM_NORMAL, _("Open source 2"), _("Open the file of the source 2") );
    parent->AddSeparator();
    parent->AddTool( ID2_PREVIOUS, wxT(""), BitmapsFunc2( 4 ), wxNullBitmap, wxITEM_NORMAL, _("Previous page"), _("Go to the previous page in both files or directories") );
    parent->AddTool( ID2_NEXT, wxT(""), BitmapsFunc2( 5 ), wxNullBitmap, wxITEM_NORMAL, _("Next page"), _("Go to the next page in both files or directories") );
    parent->AddSeparator();
    parent->AddTool( ID2_POINTS, wxT(""), BitmapsFunc2( 2 ), wxNullBitmap, wxITEM_NORMAL, _("Put points"), _("Put the 3 superimposition points on both sources") );
    parent->AddTool( ID2_SUPERIMPOSE, wxT(""), BitmapsFunc2( 3 ), wxNullBitmap, wxITEM_NORMAL, _("Superimpose sources"), _("Execute the superimposition of the sources") );
    
    parent->Realize();
}

// Implement bitmap functions

wxBitmap BitmapsFunc2( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 6 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #FFFF00",
        "d c #FF0000",
        "f c #808000",
        /* pixels */
        " ddd            ",
        "dddd            ",
        "  dd            ",
        "  dd      aaaa a",
        "  dd     a    aa",
        "dddddd       aaa",
        "                ",
        "     aa         ",
        "    abcaaaaa    ",
        "    acbcbcbcaffa",
        "    abcaffffffa ",
        "    acafffffffa ",
        "    aafffffffa  ",
        "    affffffff   ",
        "    aaaaaaaaa   "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 6 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #FFFF00",
        "d c #FF0000",
        "f c #808000",
        /* pixels */
        " dddd           ",
        "d   dd          ",
        "   dd           ",
        "  dd      aaaa a",
        " dd      a    aa",
        "dddddd       aaa",
        "                ",
        "     aa         ",
        "    abcaaaaa    ",
        "    acbcbcbcaffa",
        "    abcaffffffa ",
        "    acafffffffa ",
        "    aafffffffa  ",
        "    affffffff   ",
        "    aaaaaaaaa   "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 2)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 5 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #C0C0C0",
        "e c #D4D0C9",
        /* pixels */
        "                ",
        "   aaaaaaaa     ",
        "   abbbbbbaa   e",
        "   abbbabbaba  e",
        "   abbaaacaaaa  ",
        "   abbbabbbbba  ",
        "   abbbcccccba  ",
        "   abbbbbbbbba  ",
        "   abbccccccba  ",
        "   abbabbbbbba  ",
        "   abaaaccccba  ",
        "   abbabbbbbba  ",
        "   abbbbbbbbba  ",
        "   aaaaaaaaaaa  ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 3)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 6 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #FF0000",
        "d c #C0C0C0",
        "f c #D4D0C9",
        /* pixels */
        "aaaaaaaafffff   ",
        "abbbbbbaaffff   ",
        "abbbbaaaaaaaafff",
        "abbbdabbbbbbaaff",
        "abbbbabbbbbbabaf",
        "abbbdabbddddaaaa",
        "abcbbabbbbbbbbba",
        "acccdabbddddddba",
        "cccccabbbbbbbbba",
        "abcddabbddddddba",
        "abcbbabbbbbbbbba",
        "abcbbabdddddddba",
        "aaccaabbbbbbbbba",
        "fffccabbbbbbbbba",
        "     aaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 4)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 4 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #FF0000",
        /* pixels */
        "                ",
        "      aaaaaaa   ",
        "     aabbbbba   ",
        "    ababbbbba   ",
        "   aaaabbbbba   ",
        "   abbbbcbbba   ",
        "   abbbccbbba   ",
        "   abbcccccba   ",
        "   abccccccba   ",
        "   abbcccccba   ",
        "   abbbccbbba   ",
        "   abbbbcbbba   ",
        "   abbbbbbbba   ",
        "   aaaaaaaaaa   ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 5)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 4 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #FF0000",
        /* pixels */
        "                ",
        "   aaaaaaa      ",
        "   abbbbbaa     ",
        "   abbbbbaba    ",
        "   abbbbbaaaa   ",
        "   abbbcbbbba   ",
        "   abbbccbbba   ",
        "   abcccccbba   ",
        "   abccccccba   ",
        "   abcccccbba   ",
        "   abbbccbbba   ",
        "   abbbcbbbba   ",
        "   abbbbbbbba   ",
        "   aaaaaaaaaa   ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
