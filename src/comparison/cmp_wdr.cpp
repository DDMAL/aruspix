//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: cmp.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "cmp_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "cmp_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include "comparison/cmpmus.h"
#include "comparison/cmpctrl.h"
#include "musapp/mustoolpanel.h"

// Implement window functions

wxSizer *CmpFunc6( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );

    CmpCtrl *item1 = new CmpCtrl( parent, ID6_TREEBOOK, wxDefaultPosition, wxSize(120,160), wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER );
    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    wxStaticLine *item2 = new wxStaticLine( parent, ID6_LINE2, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBitmap *item3 = new wxStaticBitmap( parent, ID6_PREVIEW, BitmapsFunc6( 0 ), wxDefaultPosition, wxSize(200,200) );
    item0->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item4 = new wxCheckBox( parent, ID6_CB_PREVIEW, _("Preview"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CmpDataFunc6( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableCol( 1 );
    item0->AddGrowableRow( 0 );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Book information") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxFlexGridSizer *item3 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item4 = new wxStaticText( parent, ID6_TEXT, _("RISM"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID6_RISM, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID6_TEXT, _("Composer"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item6, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID6_COMPOSER, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID6_TEXT, _("Title"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID6_TITLE, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID6_TEXT, _("Printer"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID6_PRINTER, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item12 = new wxStaticText( parent, ID6_TEXT, _("Year"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item12, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item13 = new wxTextCtrl( parent, ID6_YEAR, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID6_TEXT, _("Library"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item14, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID6_LIBRARY, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxALIGN_CENTER, 5 );

    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    wxStaticBox *item17 = new wxStaticBox( parent, -1, _("File directories") );
    wxStaticBoxSizer *item16 = new wxStaticBoxSizer( item17, wxVERTICAL );

    wxStaticText *item18 = new wxStaticText( parent, ID6_TEXT, _("Images"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item19 = new wxFlexGridSizer( 2, 0, 0 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID6_BOOK_IMAGES, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item22 = new wxButton( parent, ID6_ON_BOOK_IMAGES, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item19->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item16->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item23 = new wxStaticText( parent, ID6_TEXT, _("Aruspix files"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item24 = new wxFlexGridSizer( 2, 0, 0 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item26 = new wxTextCtrl( parent, ID6_BOOK_AXFILES, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item27 = new wxButton( parent, ID6_ON_BOOK_AXFILES, _("Browse"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item24->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item16->Add( item24, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item16, 0, wxGROW|wxALL, 5 );

    wxBoxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item29 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item30 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *MenuBarFunc6()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->AppendSeparator();
    item1->Append( ID6_OPEN_CMP, _("Open &collator"), _("Open a book") );
    item0->Append( item1, _("commun1") );
    
    wxMenu* item2 = new wxMenu;
    item2->AppendSeparator();
    item2->Append( ID6_SET_DELIMITER, _("Set element as delimiter"), _("Set the current element as delimiter") );
    item0->Append( item2, _("commun2") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( ID6_CMP_LOAD, _("Reload files"), _("Reload images and Aruspix files into the book") );
    item3->AppendSeparator();
    item3->Append( ID6_COLLATE, _("Collate"), _("Collate the different editions") );
    item3->AppendSeparator();
    item3->Append( ID6_VIEW_IMAGE, _("Show original image"), _("Show the original image of the sources"), wxITEM_CHECK );
    item0->Append( item3, _("&Collator") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( ID6_ZOOM_OUT, _("Zoom out\t-"), _("Zoom out") );
    item4->Append( ID6_ZOOM_IN, _("Zoom in\t+"), _("Zoom in") );
    item4->Append( ID6_ADJUST, _("Adjust"), _("Adjust to fit the window"), wxITEM_CHECK );
    item4->Append( ID6_ADJUST_V, _("Adjust vertically"), _("Adjust to fit the window vertically"), wxITEM_CHECK );
    item4->Append( ID6_ADJUST_H, _("Adjust horizontally"), _("Adjust to fit the window horizontally"), wxITEM_CHECK );
    item4->AppendSeparator();
    item4->Append( ID6_PREVIOUS, _("&Previous page"), wxT("") );
    item4->Append( ID6_NEXT, _("&Next page"), wxT("") );
    item4->Append( ID6_GOTO, _("Go to page ...\tCtrl-G"), wxT("") );
    item0->Append( item4, _("&Page") );
    
    wxMenu* item5 = new wxMenu;
    item0->Append( item5, _("&Tools") );
    
    return item0;
}

// Implement toolbar functions

// Implement bitmap functions

wxBitmap BitmapsFunc6( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 1 1",
        "  c None",
        /* pixels */
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
