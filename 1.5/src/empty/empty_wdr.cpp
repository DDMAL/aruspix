//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: empty.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#ifdef __GNUG__
    #pragma implementation "empty_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "empty_wdr.h"

#include <wx/intl.h>

// Implement window functions

wxSizer *WindowFunc0( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 2, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );

    wxScrolledWindow *item1 = new wxScrolledWindow( parent, ID0_SCROLLED, wxDefaultPosition, wxSize(200,160), wxHSCROLL|wxVSCROLL );
    item1->SetScrollbars( 10, 10, 20, 100, 0, 0 );
    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    wxWindow *item2 = parent->FindWindow( ID0_DIRECTORIES );
    wxASSERT( item2 );
    item0->Add( item2, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *MenuBarFunc0()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->AppendSeparator();
    item1->Append( ID0_MENUITEM1, _("&Ouvrir"), wxT("") );
    item0->Append( item1, _("commun1") );
    
    wxMenu* item2 = new wxMenu;
    item0->Append( item2, _("commun2") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( ID0_MENUITEM, _("MenuItem"), wxT("") );
    item0->Append( item3, _("Menu") );
    
    return item0;
}

// Implement toolbar functions

void ToolBarFunc0( wxToolBar *parent )
{
    parent->SetMargins( 2, 2 );
    
    parent->AddTool( ID0_MENUITEM, BitmapsFunc0( 0 ), wxT("") );
    
    parent->Realize();
}

// Implement bitmap functions

wxBitmap BitmapsFunc0( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "  c None",
        "a c #FFFF00",
        /* pixels */
        "a              a",
        " a            a ",
        "  a          a  ",
        "   a        a   ",
        "    a      a    ",
        "     a    a     ",
        "      a  a      ",
        "       aa       ",
        "      a  a      ",
        "     a    a     ",
        "    a      a    ",
        "   a        a   ",
        "  a          a  ",
        " a            a ",
        "a              a"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
